using System;
using System.Collections.Generic;
using Kingmaker.UnitLogic.Mechanics.Conditions;
using Kingmaker.Kingdom.Conditions;
using Kingmaker.Assets.Code.Designers.EventConditionActionSystem.Conditions;
using Kingmaker.Assets.Designers.EventConditionActionSystem.Conditions;
using Kingmaker.Designers.EventConditionActionSystem.Conditions;

namespace BlueprintCoreGen.CodeGen.Overrides.Ignored
{
  // Examples generated by TypeUsageAnalyzer
  internal static class IgnoredConditions
  {
    public static readonly List<Type> Types =
      new()
      {
        typeof(ContextConditionCasterIsPartyEnemy),
        typeof(ContextConditionDungeonStage),
        typeof(ContextConditionInContext),
        typeof(ContextConditionStealth),
        typeof(ContextConditionTargetIsEngaged),
        typeof(BuildingHasNeighbours),
        typeof(DaysTillNextMonth),
        typeof(EventLifetime),
        typeof(KingdomAlignmentIs),
        typeof(KingdomAllArmiesInRegionDefeated),
        typeof(KingdomArtisanState),
        typeof(KingdomDay),
        typeof(KingdomEventCanStart),
        typeof(KingdomEventIsActive),
        typeof(KingdomHasResolvableEvent),
        typeof(KingdomHasUpgradeableSettlement),
        typeof(KingdomIsVisible),
        typeof(KingdomRegionIsUpgraded),
        typeof(KingdomSettlementHasBuilding),
        typeof(KingdomStatIsMaximum),
        typeof(KingdomTaskResolvedBy),
        typeof(KingdomUnrestCheck),
        typeof(CheckUnitSeeUnit),
        typeof(DualCompanionInactive),
        typeof(Paused),
        typeof(ChangeableDynamicIsLoaded),
        typeof(CheckLos),
        typeof(CompanionIsUnconscious),
        typeof(CompanionStoryUnlocked),
        typeof(CutsceneQueueState),
        typeof(ItemFromCollectionCondition),
        typeof(RomanceLocked),
      };
  }
}
