using System;
using System.Collections.Generic;

namespace BlueprintCoreGen.CodeGen.Overrides.Ignored
{
  // Examples generated by TypeUsageAnalyzer
  internal static class IgnoredConditions
  {
    public static readonly List<Type> Types =
      new()
      {
        typeof(Kingmaker.UnitLogic.Mechanics.Conditions.ContextConditionCasterIsPartyEnemy),
        typeof(Kingmaker.UnitLogic.Mechanics.Conditions.ContextConditionDungeonStage),
        typeof(Kingmaker.UnitLogic.Mechanics.Conditions.ContextConditionStealth),
        typeof(Kingmaker.UnitLogic.Mechanics.Conditions.ContextConditionTargetIsEngaged),
        typeof(Kingmaker.Kingdom.Conditions.BuildingHasNeighbours),
        typeof(Kingmaker.Kingdom.Conditions.DaysTillNextMonth),
        typeof(Kingmaker.Kingdom.Conditions.EventLifetime),
        typeof(Kingmaker.Kingdom.Conditions.KingdomAlignmentIs),
        typeof(Kingmaker.Kingdom.Conditions.KingdomAllArmiesInRegionDefeated),
        typeof(Kingmaker.Kingdom.Conditions.KingdomArtisanState),
        typeof(Kingmaker.Kingdom.Conditions.KingdomDay),
        typeof(Kingmaker.Kingdom.Conditions.KingdomEventCanStart),
        typeof(Kingmaker.Kingdom.Conditions.KingdomEventIsActive),
        typeof(Kingmaker.Kingdom.Conditions.KingdomHasResolvableEvent),
        typeof(Kingmaker.Kingdom.Conditions.KingdomHasUpgradeableSettlement),
        typeof(Kingmaker.Kingdom.Conditions.KingdomIsVisible),
        typeof(Kingmaker.Kingdom.Conditions.KingdomRegionIsUpgraded),
        typeof(Kingmaker.Kingdom.Conditions.KingdomSettlementHasBuilding),
        typeof(Kingmaker.Kingdom.Conditions.KingdomStatIsMaximum),
        typeof(Kingmaker.Kingdom.Conditions.KingdomTaskResolvedBy),
        typeof(Kingmaker.Kingdom.Conditions.KingdomUnrestCheck),
        typeof(Kingmaker.Assets.Code.Designers.EventConditionActionSystem.Conditions.CheckUnitSeeUnit),
        typeof(Kingmaker.Assets.Designers.EventConditionActionSystem.Conditions.DualCompanionInactive),
        typeof(Kingmaker.Assets.Designers.EventConditionActionSystem.Conditions.Paused),
        typeof(Kingmaker.Designers.EventConditionActionSystem.Conditions.ChangeableDynamicIsLoaded),
        typeof(Kingmaker.Designers.EventConditionActionSystem.Conditions.CheckLos),
        typeof(Kingmaker.Designers.EventConditionActionSystem.Conditions.CompanionIsUnconscious),
        typeof(Kingmaker.Designers.EventConditionActionSystem.Conditions.CompanionStoryUnlocked),
        typeof(Kingmaker.Designers.EventConditionActionSystem.Conditions.CutsceneQueueState),
        typeof(Kingmaker.Designers.EventConditionActionSystem.Conditions.ItemFromCollectionCondition),
        typeof(Kingmaker.Designers.EventConditionActionSystem.Conditions.RomanceLocked),
      };
  }
}
