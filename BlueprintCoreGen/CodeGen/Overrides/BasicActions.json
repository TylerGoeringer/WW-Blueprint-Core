[
  {
    "TypeName": "AddFact",
    "RequiredFields": [ "m_Fact", "Unit" ]
  },

  {
    "TypeName": "AddFatigueHours",
    "RequiredFields": [ "Hours", "Unit" ]
  },

  {
    "TypeName": "AddItemsToCollection",
    "CustomFields": [
      {
        "FieldName": "ItemsCollection",
        "Required": true,
        "ParamName": "items"
      }
    ],
    "Methods": [
      {
        "MethodName": "AddItems",
        "IgnoredFields": [ "m_BlueprintLoot" ],
        "CustomFields": [
          {
            "Name": "Loot",
            "Required": true,
            "ParamName": "items"
          }
        ]
      },
      {
        "MethodName": "AddItemsFromBlueprint",
        "RequiredFields": [ "m_BlueprintLoot" ],
        "IgnoredFields": [ "Loot" ]
      }
    ]
  },

  {
    "TypeName": "AddItemToPlayer",
    "Remarks": [
      "<list type=\"bullet\">",
      "<item>",
      "  <description>",
      "    If the item is a <see cref=\"BlueprintItemEquipmentHand\"/> use <see cref=\"GiveHandSlotItemToPlayer\"/>",
      "  </description>",
      "</item>",
      "<item>",
      "  <description>",
      "    If the item is a <see cref=\"BlueprintItemEquipment\"/> use <see cref=\"GiveEquipmentToPlayer\"/>",
      "  </description>",
      "</item>",
      "<item>",
      "  <description>",
      "    For any other items use <see cref=\"GiveItemToPlayer\"/>.",
      "  </description>",
      "</item>",
      "</list>"
    ],
    "Imports": [ "BlueprintItemEquipmentHand", "BlueprintItemEquipment" ],
    "CustomFields": [
      {
        "FieldName": "ItemsCollection",
        "Required": true,
        "ParamName": "items"
      }
    ],
    "Methods": [
      {
        "MethodName": "GiveItemToPlayer",
        "IgnoredFields": [ "Equip", "EquipOn", "ErrorIfDidNotEquip", "PreferredWeaponSet" ],
        "CustomFields": [
          {
            "FieldName": "m_ItemToGive",
            "Required": true,
            "ExtraAssignmentFmtLines": [
              "var bp = {1}.Instance;",
              "if (bp is BlueprintItemEquipmentHand)",
              "{{",
              "  throw new InvalidOperationException(\"Item fits in hand slot. Use GiveHandSlotItemToPlayer.\");",
              "}}",
              "else if (bp is BlueprintItemEquipment)",
              "{{",
              "  throw new InvalidOperationException(\"Item is equipment. Use GiveEquipmentToPlayer.\");",
              "}}"
            ]
          }
        ]
      },
      {
        "MethodName": "GiveEquipmentToPlayer",
        "IgnoredFields": [ "PreferredWeaponSet" ],
        "CustomFields": [
          {
            "FieldName": "m_ItemToGive",
            "Required": true,
            "ExtraAssignmentFmtLines": [
              "var bp = {1}.Instance;",
              "if (bp is BlueprintItemEquipmentHand)",
              "{{",
              "  throw new InvalidOperationException(\"Item fits in hand slot. Use GiveHandSlotItemToPlayer.\");",
              "}}",
              "else if (bp is not BlueprintItemEquipment)",
              "{{",
              "  throw new InvalidOperationException(\"Item is not equipment. Use GiveItemToPlayer.\");",
              "}}"
            ]
          }
        ]
      },
      {
        "MethodName": "GiveHandSlotItemToPlayer",
        "CustomFields": [
          {
            "FieldName": "m_ItemToGive",
            "Required": true,
            "ExtraAssignmentFmtLines": [
              "var bp = {1}.Instance;",
              "if (bp is not BlueprintItemEquipmentHand)",
              "{{",
              "  if (bp is BlueprintItemEquipment)",
              "  {{",
              "    throw new InvalidOperationException(\"Item does not fit in hand slot. Use GiveEquipmentToPlayer.\");",
              "  }}",
              "  else",
              "  {{",
              "    throw new InvalidOperationException(\"Item is not equipment. Use GiveItemToPlayer.\");",
              "  }}",
              "}}"
            ]
          }
        ]
      }
    ]
  },

  {
    "TypeName": "AddUnitToSummonPool",
    "RequiredFields": [ "m_SummonPool", "Unit" ]
  },

  {
    "TypeName": "AdvanceUnitLevel",
    "RequiredFields": [ "Unit", "Level" ]
  },

  {
    "TypeName": "AttachBuff",
    "RequiredFields": [ "m_Buff", "Target", "Duration" ]
  },

  {
    "TypeName": "ChangeAlignment",
    "RequiredFields": [ "Alignment" ]
  },

  {
    "TypeName": "ChangePlayerAlignment",
    "RequiredFields": [ "TargetAlignment" ]
  },

  {
    "TypeName": "ClearUnitReturnPosition",
    "Methods": [
      {
        "RequiredFields": [ "Unit" ]
      },
      {
        "MethodName": "ClearAllUnitReturnPosition",
        "IgnoredFields": [ "Unit" ]
      }
    ]
  },

  {
    "TypeName": "CombineToGroup",
    "RequiredFields": [ "TargetUnit", "GroupHolder" ]
  },

  {
    "TypeName": "CreaturesAround",
    "MethodName": "OnCreaturesAround",
    "RequiredFields": [ "Actions", "Radius", "Center" ]
  },

  {
    "TypeName": "DamageParty",
    "RequiredFields": [ "Damage" ],
    "CustomFields": [
      {
        "FieldName": "DamageSource",
        "ExtraAssignmentFmtLines": [ "{0}.NoSource = {1} is null;" ]
      }
    ]
  },

  {
    "TypeName": "DealDamage",
    "RequiredFields": [ "Damage", "Target" ],
    "CustomFields": [
      {
        "FieldName": "Source",
        "ExtraAssignmentFmtLines": [ "{0}.NoSource = {1} is null;" ]
      }
    ]
  },

  {
    "TypeName": "DealStatDamage",
    "RequiredFields": [ "DamageDice", "Stat", "Target" ],
    "CustomFields": [
      {
        "FieldName": "Source",
        "ExtraAssignmentFmtLines": [ "{0}.NoSource = {1} is null;" ]
      }
    ]
  },

  {
    "TypeName": "DeleteUnitFromSummonPool",
    "RequiredFields": [ "m_SummonPool", "Unit" ]
  },

  {
    "TypeName": "DestroyUnit",
    "RequiredFields": [ "Target" ]
  },

  {
    "TypeName": "Kingmaker.Designers.EventConditionActionSystem.Actions.PartyUnits",
    "MethodName": "OnPartyUnits",
    "RequiredFields": [ "m_UnitsList", "Actions" ]
  },

  { "TypeName": "DetachBuff" },

  { "TypeName": "DisableExperienceFromUnit" },

  { "TypeName": "DrainEnergy" },

  { "TypeName": "FakePartyRest" },

  { "TypeName": "GainExp" },

  { "TypeName": "GainMythicLevel" },

  { "TypeName": "HealParty" },

  { "TypeName": "HealUnit" },

  { "TypeName": "ItemSetCharges" },

  { "TypeName": "Kill" },

  { "TypeName": "LevelUpUnit" },

  { "TypeName": "MeleeAttack" },

  { "TypeName": "PartyUseAbility" },

  { "TypeName": "RaiseDead" },

  { "TypeName": "RandomAction" },

  { "TypeName": "RemoveDeathDoor" },

  { "TypeName": "Kingmaker.Designers.EventConditionActionSystem.Actions.RemoveFact" },

  { "TypeName": "RollPartySkillCheck" },

  { "TypeName": "RollSkillCheck" },

  { "TypeName": "RunActionHolder" },

  { "TypeName": "Spawn" },

  { "TypeName": "SpawnBySummonPool" },

  { "TypeName": "SpawnByUnitGroup" },

  { "TypeName": "StatusEffect" },

  { "TypeName": "Summon" },

  { "TypeName": "SummonPoolUnits" },

  { "TypeName": "SummonUnitCopy" },

  { "TypeName": "SwitchActivatableAbility" },

  { "TypeName": "SwitchDualCompanion" },

  { "TypeName": "UnitsFromSpawnersInUnitGroup" }
]