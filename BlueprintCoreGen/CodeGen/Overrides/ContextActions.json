[
  {
    "TypeName": "ContextActionAddFeature",
    "RequiredFields": [ "m_PermanentFeature" ]
  },

  {
    "TypeName": "ContextActionAddLocustClone",
    "RequiredFields": [ "m_CloneFeature" ]
  },

  {
    "TypeName": "ContextActionApplyBuff",
    "RequiredFields": [ "m_Buff" ],
    "Methods": [
      {
        "MethodName": "ApplyBuffPermanent",
        "IgnoredFields": [ "DurationSeconds", "DurationValue" ],
        "ConstantFields": [
          {
            "FieldName": "UseDurationSeconds",
            "Value": "false"
          },
          {
            "FieldName": "Permanent",
            "Value": "true"
          }
        ]
      },
      {
        "MethodName": "ApplyBuffWithDurationSeconds",
        "RequiredFields": [ "DurationSeconds" ],
        "IgnoredFields": [ "DurationValue" ],
        "ConstantFields": [
          {
            "FieldName": "UseDurationSeconds",
            "Value": "true"
          },
          {
            "FieldName": "Permanent",
            "Value": "false"
          }
        ]
      },
      {
        "MethodName": "ApplyBuff",
        "RequiredFields": [ "DurationValue" ],
        "IgnoredFields": [ "DurationSeconds" ],
        "ConstantFields": [
          {
            "FieldName": "UseDurationSeconds",
            "Value": "false"
          },
          {
            "FieldName": "Permanent",
            "Value": "false"
          }
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionArmorEnchantPool",
    "Remarks": [
      "The caster's armor is enchanted based on its available enhancement bonus. e.g. If the armor can be enchanted to +4 and has a +1 enchantment, enchantmentPlus3 is applied."
    ],
    "Examples": [
      {
        "BlueprintName": "SacredArmorEnchantSwitchAbility",
        "BlueprintGuid": "66484ebb8d358db4692ef4445fa6ac35"
      }
    ],
    "Imports": [
      "BlueprintTool",
      "BlueprintItemEnchantment",
      "BlueprintItemEnchantmentReference",
      "ItemEnchantments"
    ],
    "RequiredFields": [ "EnchantPool", "DurationValue" ],
    "IgnoredFields": [ "m_DefaultEnchantments" ],
    "ExtraParams": [
      {
        "ParamName": "enchantmentPlus1",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus1",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[0] = enchantmentPlus1?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus1.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus2",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus2",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[1] = enchantmentPlus2?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus2.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus3",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus3",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[2] = enchantmentPlus3?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus3.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus4",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus4",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[3] = enchantmentPlus4?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus4.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus5",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus5",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[4] = enchantmentPlus5?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus5.Reference;"
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionShieldArmorEnchantPool",
    "Remarks": [
      "The caster's shield is enchanted based on its available enhancement bonus. e.g. If the shield can be enchanted to +4 and has a +1 enchantment, enchantmentPlus3 is applied."
    ],
    "Examples": [
      {
        "BlueprintName": "SacredArmorShieldEnchantSwitchAbility",
        "BlueprintGuid": "b0777d9974795a5489ff0efd735a4c2a"
      }
    ],
    "Imports": [
      "BlueprintTool",
      "BlueprintItemEnchantment",
      "BlueprintItemEnchantmentReference",
      "ItemEnchantments"
    ],
    "RequiredFields": [ "EnchantPool", "DurationValue" ],
    "IgnoredFields": [ "m_DefaultEnchantments" ],
    "ExtraParams": [
      {
        "ParamName": "enchantmentPlus1",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus1",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[0] = enchantmentPlus1?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus1.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus2",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus2",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[1] = enchantmentPlus2?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus2.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus3",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus3",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[2] = enchantmentPlus3?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus3.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus4",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus4",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[3] = enchantmentPlus4?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus4.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus5",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryArmorEnhancementBonus5",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[4] = enchantmentPlus5?.Reference ?? ItemEnchantments.TemporaryArmorEnhancementBonus5.Reference;"
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionWeaponEnchantPool",
    "Remarks": [
      "The caster's weapon is enchanted based on its available enhancement bonus. e.g. If the weapon can be enchanted to +4 and has a +1 enchantment, enchantmentPlus3 is applied."
    ],
    "Examples": [
      {
        "BlueprintName": "SacredWeaponEnchantSwitchAbility",
        "BlueprintGuid": "cca63747a12b55f44ad56ef2d840d7f4"
      }
    ],
    "Imports": [
      "BlueprintTool",
      "BlueprintItemEnchantment",
      "BlueprintItemEnchantmentReference",
      "ItemEnchantments"
    ],
    "RequiredFields": [ "EnchantPool", "DurationValue" ],
    "IgnoredFields": [ "m_DefaultEnchantments" ],
    "ExtraParams": [
      {
        "ParamName": "enchantmentPlus1",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus1",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[0] = enchantmentPlus1?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus1.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus2",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus2",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[1] = enchantmentPlus2?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus2.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus3",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus3",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[2] = enchantmentPlus3?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus3.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus4",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus4",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[3] = enchantmentPlus4?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus4.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus5",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus5",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[4] = enchantmentPlus5?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus5.Reference;"
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionShieldWeaponEnchantPool",
    "Remarks": [
      "The caster's shield is enchanted based on its available enhancement bonus. e.g. If the shield can be enchanted to +4 and has a +1 enchantment, enchantmentPlus3 is applied."
    ],
    "Examples": [
      {
        "BlueprintName": "SacredWeaponShieldEnchantSwitchAbility",
        "BlueprintGuid": "a89fc47958b895948a6c613ec1b9da85"
      }
    ],
    "Imports": [
      "BlueprintTool",
      "BlueprintItemEnchantment",
      "BlueprintItemEnchantmentReference",
      "ItemEnchantments"
    ],
    "RequiredFields": [ "EnchantPool", "DurationValue" ],
    "IgnoredFields": [ "m_DefaultEnchantments" ],
    "ExtraParams": [
      {
        "ParamName": "enchantmentPlus1",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus1",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[0] = enchantmentPlus1?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus1.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus2",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus2",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[1] = enchantmentPlus2?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus2.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus3",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus3",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[2] = enchantmentPlus3?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus3.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus4",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus4",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[3] = enchantmentPlus4?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus4.Reference;"
        ]
      },
      {
        "ParamName": "enchantmentPlus5",
        "TypeName": "Blueprint<BlueprintItemEnchantment, BlueprintItemEnchantmentReference>?",
        "CommentFmt": "Defaults to TemporaryEnhancementBonus5",
        "DefaultValue": "null",
        "OperationFmt": [
          "{0}.m_DefaultEnchantments[4] = enchantmentPlus5?.Reference ?? ItemEnchantments.TemporaryEnhancementBonus5.Reference;"
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionAttackWithWeapon",
    "RequiredFields": [ "m_Stat", "m_WeaponRef" ]
  },

  {
    "TypeName": "ContextActionBreathOfLife",
    "RequiredFields": [ "Value" ]
  },

  {
    "TypeName": "ContextActionBreathOfMoney",
    "RequiredFields": [ "MinCoins", "MaxCoins" ]
  },

  {
    "TypeName": "ContextActionCastSpell",
    "RequiredFields": [ "m_Spell" ],
    "IgnoredFields": [ "OverrideDC", "OverrideSpellLevel" ],
    "CustomFields": [
      {
        "FieldName": "DC",
        "ParamName": "overrideDC",
        "CommentFmt": "Overrides the default spell DC",
        "ExtraAssignmentFmtLines": [ "{0}.OverrideDC = overrideDC is not null;" ]
      },
      {
        "FieldName": "SpellLevel",
        "ParamName": "overrideSpellLevel",
        "CommentFmt": "Overrides the default spell level",
        "ExtraAssignmentFmtLines": [ "{0}.OverrideSpellLevel = overrideSpellLevel is not null;" ]
      }
    ]
  },

  {
    "TypeName": "ContextActionChangeSharedValue",
    "Imports": [ "SharedValueChangeType" ],
    "RequiredFields": [ "SharedValue" ],
    "Methods": [
      {
        "MethodName": "ChangeSharedValueTo",
        "RequiredFields": [ "SetValue" ],
        "IgnoredFields": [ "AddValue", "MultiplyValue" ],
        "ConstantFields": [
          {
            "FieldName": "Type",
            "Value": "SharedValueChangeType.Set"
          }
        ]
      },
      {
        "MethodName": "ChangeSharedValueToHD",
        "IgnoredFields": [ "SetValue", "AddValue", "MultiplyValue" ],
        "ConstantFields": [
          {
            "FieldName": "Type",
            "Value": "SharedValueChangeType.SubHD"
          }
        ]
      },
      {
        "MethodName": "ChangeSharedValueAddTo",
        "RequiredFields": [ "AddValue" ],
        "IgnoredFields": [ "SetValue", "MultiplyValue" ],
        "ConstantFields": [
          {
            "FieldName": "Type",
            "Value": "SharedValueChangeType.Add"
          }
        ]
      },
      {
        "MethodName": "ChangeSharedValueMultiply",
        "RequiredFields": [ "MultiplyValue" ],
        "IgnoredFields": [ "SetValue", "AddValue" ],
        "ConstantFields": [
          {
            "FieldName": "Type",
            "Value": "SharedValueChangeType.Multiply"
          }
        ]
      },
      {
        "MethodName": "ChangeSharedValueDivideBy2",
        "IgnoredFields": [ "SetValue", "AddValue", "MultiplyValue" ],
        "ConstantFields": [
          {
            "FieldName": "Type",
            "Value": "SharedValueChangeType.Div2"
          }
        ]
      },
      {
        "MethodName": "ChangeSharedValueDivideBy4",
        "IgnoredFields": [ "SetValue", "AddValue", "MultiplyValue" ],
        "ConstantFields": [
          {
            "FieldName": "Type",
            "Value": "SharedValueChangeType.Div4"
          }
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionClearSummonPool",
    "RequiredFields": [ "m_SummonPool" ]
  },

  {
    "TypeName": "ContextActionCombatManeuver",
    "RequiredFields": [ "Type", "OnSuccess" ],
    "IgnoredFields": [ "ReplaceStat" ],
    "ExtraFmtLines": [
      "{0}.ReplaceStat = {0}.NewStat != StatType.Unknown || {0}.UseKineticistMainStat || {0}.UseCastingStat || {0}.UseCasterLevelAsBaseAttack || {0}.UseBestMentalStat;"
    ]
  },

  {
    "TypeName": "ContextActionCombatManeuverCustom",
    "RequiredFields": [ "Type" ]
  },

  {
    "TypeName": "ContextActionDealDamage",
    "IgnoredFields": [
      "UseMinHPAfterDamage",
      "ReadPreRolledFromSharedValue",
      "WriteResultToSharedValue",
      "WriteCriticalToSharedValue",
      "m_IsAOE"
    ],
    "CustomFields": [
      {
        "FieldName": "ResultSharedValue",
        "CommentFmt": "If specified, the resulting damage is stored in this shared value",
        "ExtraAssignmentFmtLines": [ "{0}.WriteResultToSharedValue = {1} is not null;" ]
      },
      {
        "FieldName": "CriticalSharedValue",
        "CommentFmt": "If specified and the attack roll is a critical, this shared value is set to 1",
        "ExtraAssignmentFmtLines": [ "{0}.WriteCriticalToSharedValue = {1} is not null;" ]
      }
    ],
    "Methods": [
      {
        "MethodName": "DealDamage",
        "RequiredFields": [ "Value", "DamageType" ],
        "IgnoredFields": [
          "AlreadyHalved",
          "Drain",
          "Duration",
          "AbilityType",
          "EnergyDrainType",
          "PreRolledSharedValue"
        ],
        "ConstantFields": [
          {
            "FieldName": "m_Type",
            "Value": "ContextActionDealDamage.Type.Damage"
          }
        ],
        "CustomFields": [
          {
            "FieldName": "MinHPAfterDamage",
            "ExtraAssignmentFmtLines": [ "{0}.UseMinHPAfterDamage = {1} is not null;" ]
          }
        ]
      },
      {
        "MethodName": "DealDamagePreRolled",
        "RequiredFields": [ "DamageType" ],
        "IgnoredFields": [ "IsAoE", "Drain", "Value", "Duration", "AbilityType", "EnergyDrainType" ],
        "ConstantFields": [
          {
            "FieldName": "m_Type",
            "Value": "ContextActionDealDamage.Type.Damage"
          }
        ],
        "CustomFields": [
          {
            "FieldName": "MinHPAfterDamage",
            "ExtraAssignmentFmtLines": [ "{0}.UseMinHPAfterDamage = {1} is not null;" ]
          },
          {
            "FieldName": "PreRolledSharedValue",
            "Required": "true",
            "ExtraAssignmentFmtLines": [ "{0}.ReadPreRolledFromSharedValue = true;" ]
          }
        ]
      },
      {
        "MethodName": "DealDamageToAbility",
        "RequiredFields": [ "Value", "AbilityType" ],
        "IgnoredFields": [
          "Half",
          "AlreadyHalved",
          "IsAoE",
          "DamageType",
          "Duration",
          "EnergyDrainType",
          "PreRolledSharedValue",
          "UseWeaponDamageModifiers"
        ],
        "ConstantFields": [
          {
            "FieldName": "m_Type",
            "Value": "ContextActionDealDamage.Type.AbilityDamage"
          }
        ],
        "CustomFields": [
          {
            "FieldName": "MinHPAfterDamage",
            "ParamName": "minAbilityAfterDamage",
            "ExtraAssignmentFmtLines": [ "{0}.UseMinHPAfterDamage = {1} is not null;" ]
          }
        ]
      },
      {
        "MethodName": "DealDamagePermanentNegativeLevels",
        "RequiredFields": [ "Value" ],
        "IgnoredFields": [
          "Half",
          "AlreadyHalved",
          "IsAoE",
          "Drain",
          "DamageType",
          "Duration",
          "AbilityType",
          "MinHPAfterDamage",
          "PreRolledSharedValue"
        ],
        "ConstantFields": [
          {
            "FieldName": "m_Type",
            "Value": "ContextActionDealDamage.Type.EnergyDrain"
          },
          {
            "FieldName": "EnergyDrainType",
            "Value": "EnergyDrainType.Permanent"
          }
        ]
      },
      {
        "MethodName": "DealDamageTemporaryNegativeLevels",
        "RequiredFields": [ "Value", "Duration" ],
        "IgnoredFields": [
          "Half",
          "AlreadyHalved",
          "IsAoE",
          "Drain",
          "DamageType",
          "AbilityType",
          "EnergyDrainType",
          "MinHPAfterDamage",
          "PreRolledSharedValue"
        ],
        "ConstantFields": [
          {
            "FieldName": "m_Type",
            "Value": "ContextActionDealDamage.Type.EnergyDrain"
          }
        ],
        "ExtraParams": [
          {
            "ParamName": "makePermanentOnFailedSave",
            "TypeName": "bool",
            "DefaultValue": "false",
            "OperationFmt": [
              "{0}.EnergyDrainType = {1} ? EnergyDrainType.SaveOrBecamePermanent : EnergyDrainType.Temporary;"
            ]
          }
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionDispelMagic",
    "RequiredFields": [ "m_BuffType", "m_CheckType", "m_MaxSpellLevel" ],
    "IgnoredFields": [ "m_StopAfterCountRemoved", "m_UseMaxCasterLevel" ],
    "CustomFields": [
      {
        "FieldName": "CheckSchoolOrDescriptor",
        "CommentFmt": "If true, effects matching school or descriptor are targeted. If false, effects matching school and descriptor are targeted."
      },
      {
        "FieldName": "m_CountToRemove",
        "ExtraAssignmentFmtLines": [ "{0}.m_StopAfterCountRemoved = {1} is not null;" ]
      },
      {
        "FieldName": "m_MaxCasterLevel",
        "ExtraAssignmentFmtLines": [ "{0}.m_UseMaxCasterLevel = {1} is not null;" ]
      }
    ]
  },

  {
    "TypeName": "ContextActionEnchantWornItem",
    "RequiredFields": [ "m_Enchantment", "Slot", "DurationValue" ]
  },

  {
    "TypeName": "ContextActionFinishObjective",
    "RequiredFields": [ "m_Objective" ]
  },

  {
    "TypeName": "ContextActionForEachSwallowedUnit",
    "RequiredFields": [ "Action" ]
  },

  {
    "TypeName": "ContextActionGrapple",
    "CustomFields": [
      {
        "FieldName": "m_CasterBuff",
        "CommentFmt": "Buff applied to the caster for the duration of the grapple check"
      },
      {
        "FieldName": "m_TargetBuff",
        "CommentFmt": "Buff applied to the target for the duration of the grapple check"
      }
    ]
  },

  {
    "TypeName": "ContextActionHealStatDamage",
    "RequiredFields": [ "m_HealType", "m_StatClass" ],
    "IgnoredFields": [ "WriteResultToSharedValue" ],
    "CustomFields": [
      {
        "FieldName": "Value",
        "CommentFmt": "Required when the heal type is StatDamageHealType.Dice"
      },
      {
        "FieldName": "ResultSharedValue",
        "ExtraAssignmentFmtLines": [ "{0}.WriteResultToSharedValue = {1} is not null;" ]
      }
    ]
  },

  {
    "TypeName": "ContextActionHealTarget",
    "RequiredFields": [ "Value" ]
  },

  {
    "TypeName": "ContextActionOnContextCaster",
    "RequiredFields": [ "Actions" ]
  },

  {
    "TypeName": "ContextActionOnOwner",
    "RequiredFields": [ "Actions" ]
  },

  {
    "TypeName": "ContextActionsOnPet",
    "MethodName": "OnPets",
    "Remarks": [ "Actions are run on all of the target unit's pets." ],
    "RequiredFields": [ "Actions" ],
    "IgnoredFields": [ "AllPets" ],
    "CustomFields": [
      {
        "FieldName": "PetType",
        "CommentFmt": "If specified, actions only run on pets of that type.",
        "ExtraAssignmentFmtLines": [ "{0}.AllPets = {1} is not null;" ]
      }
    ]
  },

  {
    "TypeName": "ContextActionOnRandomAreaTarget",
    "Remarks": [ "Only works inside of AbilityAreaEffectRunAction and only effects enemies." ],
    "RequiredFields": [ "Actions" ],
    "IgnoredFields": [ "OnEnemies" ]
  },

  {
    "TypeName": "ContextActionOnRandomTargetsAround",
    "RequiredFields": [ "Actions" ]
  },

  {
    "TypeName": "ContextActionOnSwarmTargets",
    "RequiredFields": [ "Actions" ]
  },

  {
    "TypeName": "ContextActionPartyMembers",
    "RequiredFields": [ "Actions" ]
  },

  {
    "TypeName": "ContextActionProjectileFx",
    "RequiredFields": [ "m_Projectile" ]
  },

  {
    "TypeName": "ContextActionRandomize",
    "CustomFields": [
      {
        "FieldName": "m_Actions",
        "ParamName": "weightedActions",
        "TypeName": "params (ActionsBuilder actions, int weight)[]",
        "Required": "true",
        "CommentFmt": "List of a pair mapping to ContextActionRandomize.ActionWrapper. Weight represents the relative probability compared to the other entries in the list.",
        "AssignmentFmtRhs": "{0}.Select(action => new ContextActionRandomize.ActionWrapper {{ Action = action.actions.Build(), Weight = action.weight }}).ToArray()"
      }
    ]
  },

  {
    "TypeName": "ContextActionRecoverItemCharges",
    "RequiredFields": [ "m_Item" ]
  },

  {
    "TypeName": "ContextActionReduceBuffDuration",
    "RequiredFields": [ "m_TargetBuff", "DurationValue" ],
    "Methods": [
      {
        "MethodName": "IncreaseBuffDuration",
        "ConstantFields": [
          {
            "FieldName": "Increase",
            "Value": "true"
          }
        ]
      },
      {
        "MethodName": "ReduceBuffDuration",
        "ConstantFields": [
          {
            "FieldName": "Increase",
            "Value": "false"
          }
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionRemoveBuff",
    "RequiredFields": [ "m_Buff" ]
  },

  {
    "TypeName": "ContextActionRemoveBuffsByDescriptor",
    "RequiredFields": [ "SpellDescriptor" ]
  },

  {
    "TypeName": "ContextActionRemoveBuffSingleStack",
    "RequiredFields": [ "m_TargetBuff" ]
  },

  {
    "TypeName": "ContextActionRepeatedActions",
    "RequiredFields": [ "Actions", "Value" ]
  },

  {
    "TypeName": "ContextActionRestoreSpells",
    "RequiredFields": [ "m_Spellbooks" ]
  },

  {
    "TypeName": "ContextActionResurrect",
    "CustomFields": [
      {
        "FieldName": "m_CustomResurrectionBuff",
        "CommentFmt": "Replaces the default resurrection buff. Must contain a ResurrectionLogic component."
      }
    ],
    "Methods": [
      {
        "MethodName": "Resurrect",
        "ConstantFields": [
          {
            "FieldName": "FullRestore",
            "Value": "false"
          }
        ],
        "CustomFields": [
          {
            "FieldName": "ResultHealth",
            "CommentFmt": "Percentage of unit's health after resurrection as a float between 0.0 (0%) and 1.0 (100%)."
          }
        ]
      },
      {
        "MethodName": "ResurrectAndFullRestore",
        "IgnoredFields": [ "ResultHealth" ],
        "ConstantFields": [
          {
            "FieldName": "FullRestore",
            "Value": "true"
          }
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionSavingThrow",
    "Imports": [ "ConditionsBuilder" ],
    "RequiredFields": [ "Type" ],
    "IgnoredFields": [ "HasCustomDC" ],
    "CustomFields": [
      {
        "FieldName": "Actions",
        "ParamName": "onResult"
      },
      {
        "FieldName": "FromBuff",
        "CommentFmt": "If true, onResult must have a ContextActionConditionalSaved w/ ContextActionApplyBuff in it's success actions. The buff associated with that component is attached to the RuleSavingThrow."
      },
      {
        "FieldName": "m_ConditionalDCIncrease",
        "ParamName": "conditionalDCModifiers",
        "TypeName": "List<(ConditionsBuilder conditions, ContextValue modifier)>",
        "AssignmentFmtRhs": "{0}?.Select(mod => new ContextActionSavingThrow.ConditionalDCIncrease {{ Condition = mod.conditions.Build(), Value = mod.modifier }})?.ToArray()"
      },
      {
        "FieldName": "CustomDC",
        "ExtraAssignmentFmtLines": [ "{0}.HasCustomDC = {1} is not null;" ]
      }
    ]
  },

  {
    "TypeName": "ContextActionSelectByValue",
    "ConstantFields": [
      {
        "FieldName": "m_Type",
        "Value": "ContextActionSelectByValue.SelectionType.Greatest"
      }
    ],
    "CustomFields": [
      {
        "FieldName": "m_Variants",
        "TypeName": "params (ContextValue value, ActionsBuilder action)[]",
        "ParamName": "actionVariants",
        "CommentFmt": "The action associated with the highest value is selected to run.",
        "Required": "true",
        "AssignmentFmtRhs": "{0}.Select(variant => new ContextActionSelectByValue.ValueAndAction {{ Value = variant.value, Action = variant.action.Build() }}).ToArray()"
      }
    ]
  },

  {
    "TypeName": "ContextActionSkillCheck",
    "RequiredFields": [ "Stat" ],
    "IgnoredFields": [ "UseCustomDC" ],
    "CustomFields": [
      {
        "FieldName": "CustomDC",
        "ExtraAssignmentFmtLines": [ "{0}.UseCustomDC = {1} is not null;" ]
      },
      {
        "FieldName": "m_ConditionalDCIncrease",
        "TypeName": "List<(ConditionsBuilder condition, ContextValue value)>",
        "ParamName": "dcModifiers",
        "AssignmentFmtRhs": "{0}?.Select(mod => new ContextActionSkillCheck.ConditionalDCIncrease {{ Condition = mod.condition.Build(), Value = mod.value }})?.ToArray()"
      }
    ],
    "Methods": [
      {
        "MethodName": "SkillCheck",
        "IgnoredFields": [ "FailureDiffMoreOrEqual5Less10", "FailureDiffMoreOrEqual10" ],
        "ConstantFields": [
          {
            "FieldName": "CalculateDCDifference",
            "Value": "false"
          }
        ]
      },
      {
        "MethodName": "SkillCheckWithDegreesOfFailure",
        "ConstantFields": [
          {
            "FieldName": "CalculateDCDifference",
            "Value": "true"
          }
        ],
        "CustomFields": [
          {
            "FieldName": "FailureDiffMoreOrEqual5Less10",
            "ParamName": "failureBy5to10"
          },
          {
            "FieldName": "FailureDiffMoreOrEqual10",
            "ParamName": "failureBy10orMore"
          }
        ]
      }
    ]
  },

  {
    "TypeName": "ContextActionSpawnAreaEffect",
    "RequiredFields": [ "m_AreaEffect", "DurationValue" ]
  },

  {
    "TypeName": "ContextActionSpawnControllableProjectile",
    "RequiredFields": [ "ControllableProjectile", "AssociatedCasterBuff" ]
  },


  { "TypeName": "AbilityCustomSharedBurden" },

  { "TypeName": "AbilityCustomSharedGrace" },

  { "TypeName": "BuffActionAddStatBonus" },

  { "TypeName": "ContextActionAcceptBurn" },

  { "TypeName": "ContextActionAddRandomTrashItem" },

  { "TypeName": "ContextActionAeonRollbackToSavedState" },

  { "TypeName": "ContextActionBatteringBlast" },

  { "TypeName": "ContextActionBreakFree" },

  { "TypeName": "ContextActionConditionalSaved" },

  { "TypeName": "ContextActionDealWeaponDamage" },

  { "TypeName": "ContextActionDetachFromSpawner" },

  { "TypeName": "ContextActionDetectSecretDoors" },

  { "TypeName": "ContextActionDevourBySwarm" },

  { "TypeName": "ContextActionDisarm" },

  { "TypeName": "ContextActionDismissAreaEffect" },

  { "TypeName": "ContextActionDismount" },

  { "TypeName": "ContextActionDropItems" },

  { "TypeName": "ContextActionGiveExperience" },

  { "TypeName": "ContextActionHealBurn" },

  { "TypeName": "ContextActionHealEnergyDrain" },

  { "TypeName": "ContextActionHideInPlainSight" },

  { "TypeName": "ContextActionKill" },

  { "TypeName": "ContextActionKnockdownTarget" },

  { "TypeName": "ContextActionMakeKnowledgeCheck" },

  { "TypeName": "ContextActionMarkForceDismemberOwner" },

  { "TypeName": "ContextActionMeleeAttack" },

  { "TypeName": "ContextActionMount" },

  { "TypeName": "ContextActionPrintHDRestrictionToCombatLog" },

  { "TypeName": "ContextActionProvokeAttackFromCaster" },

  { "TypeName": "ContextActionProvokeAttackOfOpportunity" },

  { "TypeName": "ContextActionPush" },

  { "TypeName": "ContextActionRangedAttack" },

  { "TypeName": "ContextActionReduceDebilitatingBuffsDuration" },

  { "TypeName": "ContextActionRemoveDeathDoor" },

  { "TypeName": "ContextActionRemoveSelf" },

  { "TypeName": "ContextActionResetAlignment" },

  { "TypeName": "ContextActionRestoreAllSpellSlots" },

  { "TypeName": "ContextActionSpawnMonster" },

  { "TypeName": "ContextActionSpawnUnlinkedMonster" },

  { "TypeName": "ContextActionSpendAttackOfOpportunity" },

  { "TypeName": "ContextActionStealBuffs" },

  { "TypeName": "ContextActionSwallowWhole" },

  { "TypeName": "ContextActionSwarmAttack" },

  { "TypeName": "ContextActionSwarmTarget" },

  { "TypeName": "ContextActionSwitchDualCompanion" },

  { "TypeName": "ContextActionTranslocate" },

  { "TypeName": "ContextActionUnsummon" },

  { "TypeName": "ContextRestoreResource" },

  { "TypeName": "ContextSpendResource" },

  { "TypeName": "Demoralize" },

  { "TypeName": "EnhanceWeapon" },

  { "TypeName": "SwordlordAdaptiveTacticsAdd" },

  { "TypeName": "SwordlordAdaptiveTacticsClear" }
]